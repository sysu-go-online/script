FORMAT: 1A
HOST: http://go-online/api

# go-online

go-online is a simple online application which allows people code, run and test anywhere.

## Session Collection [/session]

## User Collection [/users]

### Get user information [GET /users/{username}]

+ Response 200 (application/json)

        {
            "email": "user@gmail.com"
        }

+ Response 204

### Create User [POST /users]

+ Request (application/json)

    + Body
        
            {
                    "email": "email@email.com",
                    "username": "username",
                    "password": "password"
            }
            
+ Response 200

+ Response 401

+ Response 500

## Auth Collection [/auth]

### User login [POST /auth?type={authtype}]

+ Parameters

    + authtype: "jwt" (string) - Specified the auth type
    
+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                    "username":"username",
                    "password":"password"
            }
            
+ Response 200

    + Headers
        
            Authorization: token

+ Response 400

+ Response 500

### User logout [DELETE /auth?type={authtype}]

+ Request

    + Headers
        
            Authorization: token
        
+ Response 200

+ Response 401

## Project Collection [/users/{username}/projects]

### Create project [POST /users/{username}/projects]

+ Request (application/json)

    + Headers
        
            Authorization: token

    + Body

            {
                "name": "projectName",
                "description": "description",
                "language": 1,
                "git_path":"https://xxx.github.git"
            }
                
+ Response 200

+ Response 401

### List projects [GET /users/{username}/projects]

+ Response 200 (application/json)

    + Headers
        
            Authorization: token
            
    + Body
        [
            {
                "name": "projectname",
                "language": 0
            }
        ]
        
+ Response 204

+ Response 401

## File Collection [/users/{username}/projects/{projectname}/files]

### Get file structure [GET /users/{username}/projects/{projectname}/files]

Get file structure with given projectid
+ Request

    + Headers

            Authorization: token
            
+ Response 200 (application)

        [
            {
                "id": 1,
                "name": "file1",
                "type": "file"
            },
            {
                "id": 2,
                "name": "dir1",
                "type": "dir",
                "children": [
                    {
                        "id": 3,
                        "name": "file2",
                        "type": "file"
                    }
                ]
            }
        ]

### Get file content [GET /users/{username}/projects/{projectname}/files/{filepath}]

Get file content with given and file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root

+ Request

    + Headers

            Authorization: token
    
+ Response 200 (plain/text)

        "Here is the content of the required file"
        
### Upload file content [PATCH /users/{username}/projects/{projectname}/files/{filepath}]

Upload file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
   
+ Request (application/json)

    + Headers

            Authorization: token
            
    + Body
    
            {
                "operation": "update",
                "content": "here is the content to be saved"
            }

+ Response 200

### Rename file [PATCH /users/{username}/projects/{projectname}/files/{filepath}]

Upload file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
   
+ Request (application/json)

    + Headers

            Authorization: token
            
    + Body
    
            {
                "operation": "rename",
                "content": "new relative file path"
            }

+ Response 200

### Create new file [POST /users/{username}/projects/{projectname}/files/{filepath}]

Create a new file with given path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root

+ Request (application/json)

    + Headers

            Authorization: token

    + Body
    
            {
                "dir": true
            }
    
+ Response 200

### Delete file [DELETE /users/{username}/projects/{projectname}/files/{filepath}]

Delete file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
    
+ Request

    + Headers
    
            Authorization: token
    
+ Response 200

## WebSocket Collection [/ws]

### TTY Connection [/ws/tty]

Connect to tty service

### Debug Connection [/ws/debug]

Connect to debug service