FORMAT: 1A
HOST: http://go-online/api

# go-online

go-online is a simple online application which allows people code, run and test anywhere.

## Session Collection [/session]

### User login [POST /session]


## User Collection [/users]

### Get user message [GET /users/{username}]

+ Response 200 (application/json)

        {
            "name": "username",
            "githubURL": "https://url",
            "email": "user@gmail.com",
            "gender": 0,
            "age": 18
        }

+ Response 204

### Update user message [PATCH /users/{username}]
aliy
+ Request (application/json)

        {
            "gender": 1,
            "age": 19
        }
                
+ Response 200

+ Response 204

## Project Collection [/users/{username}/projects]

### Create project [POST /users/{username}/projects]

+ Request

        + body (application/json)
    
                {
                    "name": "projectName",
                    "language": "golang",
                    "setting": {
                        "version": "1.9.0"
                    }
                }
                
+ Response 200 (application/json)

### List projects [GET /users/{username}/projects]

+ Response 200 (application/json)

        [
            {
                "name": "projectname",
                "language": "golang"
            }
        ]
        
+ Response 204

## File Collection [/users/{username}/projects/{projectname}/files]

### Get file structure [GET /users/{username}/projects/{projectname}/files]

Get file structure with given projectid
    
+ Response 200 (application)

        [
            {
                "id": 1,
                "name": "file1",
                "type": "file"
            },
            {
                "id": 2,
                "name": "dir1",
                "type": "dir",
                "children": [
                    {
                        "id": 3,
                        "name": "file2",
                        "type": "file"
                    }
                ]
            }
        ]

### Get file content [GET /users/{username}/projects/{projectname}/files/{filepath}]

Get file content with given and file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
    
+ Response 200 (plain/text)

        "Here is the content of the required file"
        
### Upload file content [PATCH /users/{username}/projects/{projectname}/files/{filepath}]

Upload file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
   
+ Request

    + Body
    
            "Here is the content of the file required to be updated"

+ Response 200

### Create new file [POST /users/{username}/projects/{projectname}/files/{filepath}]

Create a new file with given path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root

+ Request

    + Body
    
            {
                "dir": true
            }
    
+ Response 200

### Delete file [DELETE /users/{username}/projects/{projectname}/files/{filepath}]

Delete file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
    
+ Response 200

## Command Collection [/ws]

### Init a connection

We should note that this collection uses ws to communicate with each other, so I can not show the IO with this document.
In general, the front end init a ws connection with server, and there should include some validation message in there's header.
All the message in a connection is a part of the initial command and once the connection was shutted down, it means the resources should be released.
A user can use one command now, and he can use one connection , that is , one docker container at the same time.

+ Request

    + Body
    
            "Here is a command to be run"
            
+ Response 200 (plain/text)

        "Here is the return message"