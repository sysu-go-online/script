FORMAT: 1A
HOST: http://go-online.heartublade.com/api

# go-online

go-online is a simple online application which allows people code, run and test anywhere.

## User Collection [/users]

`/users(\/[a-zA-Z_]+([0-9]*[a-zA-Z_-]*)*)?`

### Get user information [GET /users/{username}]

+ Response 200 (application/json)

        {
            "email": "user@gmail.com"
        }

+ Response 204

### Create User [POST /users]

+ Request (application/json)

    + Body
        
            {
                    "email": "email@email.com",
                    "username": "username",
                    "password": "password"
            }
            
+ Response 200

+ Response 401

+ Response 500

### Get User home directory structure [GET /users/{username}/files]

+ Request

    + Headers

            Authorization: token
            
+ Response 200 (application)

        [
            {
                "name": "file1",
                "type": "file"
            },
            {
                "name": "dir1",
                "type": "folder",
                "children": [
                    {
                        "name": "file2",
                        "type": "file"
                    }
                ]
            }
        ]

## Auth Collection [/auth]

`/auth`

### User login [POST /auth?type={authtype}]

+ Parameters

    + authtype: "jwt" (string) - Specified the auth type
    
+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                    "username":"username",
                    "password":"password"
            }
            
+ Response 200

    + Headers
        
            Authorization: token

+ Response 400

+ Response 500

### User logout [DELETE /auth?type={authtype}]

+ Request

    + Headers
        
            Authorization: token
        
+ Response 200

+ Response 401

## Project Collection [/users/{username}/projects]

`/users/[a-zA-Z_]+([0-9]*[a-zA-Z_-]*)*/projects`

### Create project [POST /users/{username}/projects]

+ Request (application/json)

    + Headers
        
            Authorization: token

    + Body

            {
                "name": "projectName",
                "description": "description",
                "path": "go/src/github.com/username/",
                "git_path":"https://xxx.github.git",
                "isClone": true
            }
                
+ Response 200

+ Response 401

### Delete project [DELETE /users/{username}/projects]

+ Request (application/json)

    + Headers
        
            Authorization: token
                
+ Response 200

+ Response 401

### List projects [GET /users/{username}/projects]

+ Response 200 (application/json)

    + Headers
        
            Authorization: token
            
    + Body
    
            [
                {
                    "name": "projectname"
                }
            ]
        
+ Response 204

+ Response 401

## Server Collection [/users/{username}/servers]

`/users/[a-zA-Z_]+([0-9]*[a-zA-Z_-]*)*/servers`

### Change port status [PATCH /users/{username}/servers/{id}/ports/{portNumber}]

Open or close a port

+ Request (application/json)

    + Headers
        
            Authorization: token
            
    + Body
    
            {
                "expose": true
            }
            
+ Response 200 (application)

        {
            "ok": true,
            "url": "xxx.go-online.com"
        }

+ Response 401

### Get ports status [GET /users/{username}/servers/{id}/ports]

Check if ports is open

+ Request (application/json)

    + Headers
        
            Authorization: token
            
+ Response 200 (application)

        [
            {
                "port": 8080,
                "url": "http://xxx.go-online.com"
            }
        ]

### Change server status [PATCH /users/{username}/servers/{id}/status]

Start or close a always running server which has been created before

+ Request (application/json)

    + Headers
        
            Authorization: token
            
    + Body
    
            {
                "start": true
            }
            
+ Response 200

+ Response 204

+ Response 401

### Create a server [POST /users/{username}/servers]

To be finished, you can only create a default container whose image can be found in docker hub

+ Request (application/json)

    + Headers
        
            Authorization: token
            
    + Body
    
            {
                "baseImage": "mysql"
            }
            
+ Response 200

        {
            "ok": true,
            "msg": "exert the max number"
        }
        
### Remove a server [DELETE /users/{username}/servers/{id}]

+ Request (application/json)

    + Headers
        
            Authorization: token
            
+ Response 200

### Get server list with status [GET /users/{username}/servers]

Get server list with state, like running state

+ Request (application/json)

    + Headers
        
            Authorization: token
            
+ Response 200 (application)

        [
            {
                "id": "server_id",
                "image": "mysql",
                "isRunning": false
            }
        ]

## File Collection [/users/{username}/projects/{projectname}/files]

`/users/[a-zA-Z_]+([0-9]*[a-zA-Z_-]*)*/projects/[a-zA-Z_]+([0-9]*[a-zA-Z_-]*)*/files`

### Get file structure [GET /users/{username}/projects/{projectname}/files]

Get file structure with given project name

+ Request

    + Headers

            Authorization: token
            
+ Response 200 (application)

        [
            {
                "name": "projectName",
                "type": "folder",
                "expand": true,
                "selected": false,
                "rename": false,
                "children": [
                    {
                        "name": "folder 1",
                        "type": "folder",
                        "expand": false,
                        "selected": false,
                        "rename": false,
                        "children": [
                            {
                                "name": "file 1",
                                "type": "file",
                                "selected": false,
                                "rename": false
                            }
                        ]
                    },
                    {
                        "name": "file 2",
                        "type": "file",
                        "selected": false,
                        "rename": false
                    }
                ]
            }
        ]

### Get file content [GET /users/{username}/projects/{projectname}/files/{filepath}]

Get file content with given and file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root

+ Request

    + Headers

            Authorization: token
    
+ Response 200 (plain/text)

        "Here is the content of the required file"
        
### Upload file content [PATCH /users/{username}/projects/{projectname}/files/{filepath}]

Upload file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
   
+ Request (application/json)

    + Headers

            Authorization: token
            
    + Body
    
            {
                "operation": "update",
                "content": "file content"
            }

+ Response 200

### Rename file [PATCH /users/{username}/projects/{projectname}/files/{filepath}]

Upload file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
   
+ Request (application/json)

    + Headers

            Authorization: token
            
    + Body
    
            {
                "operation": "rename",
                "content": "new relative file path"
            }

+ Response 200

### Create new file(folder) [POST /users/{username}/projects/{projectname}/files/{filepath}]

Create a new file with given path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root

+ Request (application/json)

    + Headers

            Authorization: token

    + Body
    
            {
                "dir": true
            }
    
+ Response 200

### Delete file [DELETE /users/{username}/projects/{projectname}/files/{filepath}]

Delete file content with given file path

+ Parameters
    + filepath: "a/b/a" (string) - Specified the relative path with the project root
    
+ Request

    + Headers
    
            Authorization: token
    
+ Response 200

## WebSocket Collection [/ws]

### TTY Connection [GET /ws/tty]

Connect to tty service

+ Response 200

### Monitor directory changes [GET /ws/dir]

+ Response 200

## Docker Collection [/]

`/`

### Create container [POST /create]

+ Request (application/json)

    + Body
    
            {
                "image": "ubuntu",
                "pwd": "/root/",
                "env": ["GOPATH=/root"],
                "mnt": ["/home/txzdream", "/git"],
                "target": ["/root", "/git"],
                "network": ["username", "projectname"]
            }
            
+ Response 200 (application)

        {
            "id": "7fa064eee9ba",
            "ok": true,
            "msg": ""
        }